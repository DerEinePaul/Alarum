import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../core/settings/app_settings.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return Consumer<AppSettings>(
      builder: (context, settings, child) {
        return Scaffold(
          appBar: AppBar(
            title: Text(settings.getText('settings')),
            backgroundColor: colorScheme.surface,
            foregroundColor: colorScheme.onSurface,
            elevation: 0,
          ),
          body: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              // ═══════════════════════════════════════════════════════════
              // THEME SETTINGS (NEU!)
              // ═══════════════════════════════════════════════════════════
              Text(
                settings.getText('appearance'),
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  color: colorScheme.primary,
                  fontWeight: FontWeight.w700,
                  letterSpacing: 0.5,
                ),
              ),
              const SizedBox(height: 12),
              
              // Theme Mode Selector
              Card(
                elevation: 0,
                color: colorScheme.surfaceContainerHighest,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.palette_outlined, color: colorScheme.primary, size: 24),
                          const SizedBox(width: 12),
                          Text(
                            settings.getText('themeMode'),
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              color: colorScheme.onSurface,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      
                      // Light Mode
                      _ThemeModeOption(
                        icon: Icons.light_mode_outlined,
                        title: settings.getText('lightMode'),
                        value: ThemeMode.light,
                        groupValue: settings.themeMode,
                        onChanged: (value) => settings.setThemeMode(value!),
                        colorScheme: colorScheme,
                      ),
                      
                      const SizedBox(height: 8),
                      
                      // Dark Mode
                      _ThemeModeOption(
                        icon: Icons.dark_mode_outlined,
                        title: settings.getText('darkMode'),
                        value: ThemeMode.dark,
                        groupValue: settings.themeMode,
                        onChanged: (value) => settings.setThemeMode(value!),
                        colorScheme: colorScheme,
                      ),
                      
                      const SizedBox(height: 8),
                      
                      // System Mode
                      _ThemeModeOption(
                        icon: Icons.brightness_auto_outlined,
                        title: settings.getText('systemMode'),
                        value: ThemeMode.system,
                        groupValue: settings.themeMode,
                        onChanged: (value) => settings.setThemeMode(value!),
                        colorScheme: colorScheme,
                      ),
                    ],
                  ),
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Dynamic Colors Toggle
              Card(
                elevation: 0,
                color: colorScheme.surfaceContainerHighest,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: SwitchListTile(
                  secondary: Icon(
                    Icons.auto_awesome_outlined,
                    color: colorScheme.primary,
                  ),
                  title: Text(
                    settings.getText('dynamicColors'),
                    style: TextStyle(
                      color: colorScheme.onSurface,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  subtitle: Text(
                    settings.getText('dynamicColorsDesc'),
                    style: TextStyle(
                      color: colorScheme.onSurfaceVariant,
                      fontSize: 12,
                    ),
                  ),
                  value: settings.useDynamicColors,
                  onChanged: (value) => settings.setDynamicColors(value),
                  activeColor: colorScheme.primary,
                  activeTrackColor: colorScheme.primaryContainer,
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Theme Preview Card
              Card(
                elevation: 0,
                color: colorScheme.primaryContainer.withValues(alpha: 0.5),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    children: [
                      Icon(
                        isDark ? Icons.nights_stay : Icons.wb_sunny,
                        size: 48,
                        color: colorScheme.onPrimaryContainer,
                      ),
                      const SizedBox(height: 12),
                      Text(
                        settings.getText('themePreview'),
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: colorScheme.onPrimaryContainer,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        isDark ? settings.getText('darkMode') : settings.getText('lightMode'),
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: colorScheme.onPrimaryContainer.withValues(alpha: 0.8),
                        ),
                      ),
                      const SizedBox(height: 16),
                      
                      // Color Palette Preview
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          _ColorCircle(color: colorScheme.primary, label: 'Primary'),
                          const SizedBox(width: 8),
                          _ColorCircle(color: colorScheme.secondary, label: 'Secondary'),
                          const SizedBox(width: 8),
                          _ColorCircle(color: colorScheme.tertiary, label: 'Tertiary'),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              
              const SizedBox(height: 32),
              
              // ═══════════════════════════════════════════════════════════
              // LANGUAGE SETTINGS
              // ═══════════════════════════════════════════════════════════
              Text(
                settings.getText('language'),
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  color: colorScheme.primary,
                  fontWeight: FontWeight.w700,
                  letterSpacing: 0.5,
                ),
              ),
              const SizedBox(height: 12),
              Card(
                elevation: 2,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        settings.getText('language'),
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: colorScheme.onSurface,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 16),
                      RadioListTile<String>(
                        title: Text(settings.getText('german')),
                        value: 'de',
                        groupValue: settings.language,
                        onChanged: (value) {
                          if (value != null) {
                            settings.setLanguage(value);
                          }
                        },
                        activeColor: colorScheme.primary,
                      ),
                      RadioListTile<String>(
                        title: Text(settings.getText('english')),
                        value: 'en',
                        groupValue: settings.language,
                        onChanged: (value) {
                          if (value != null) {
                            settings.setLanguage(value);
                          }
                        },
                        activeColor: colorScheme.primary,
                      ),
                    ],
                  ),
                ),
              ),
              
              const SizedBox(height: 32),
              
              // ═══════════════════════════════════════════════════════════
              // TIME FORMAT SETTINGS
              // ═══════════════════════════════════════════════════════════
              Text(
                settings.getText('timeFormat'),
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  color: colorScheme.primary,
                  fontWeight: FontWeight.w700,
                  letterSpacing: 0.5,
                ),
              ),
              const SizedBox(height: 12),
              
              // Uhrzeitformat
              Card(
                elevation: 0,
                color: colorScheme.surfaceContainerHighest,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        settings.getText('timeFormat'),
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: colorScheme.onSurface,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 16),
                      RadioListTile<bool>(
                        title: Text(settings.getText('24hour')),
                        subtitle: Text(settings.formatTime(DateTime.now().copyWith(hour: 14, minute: 30))),
                        value: true,
                        groupValue: settings.is24HourFormat,
                        onChanged: (value) {
                          if (value == true && !settings.is24HourFormat) {
                            settings.toggle24HourFormat();
                          }
                        },
                        activeColor: colorScheme.primary,
                      ),
                      RadioListTile<bool>(
                        title: Text(settings.getText('12hour')),
                        subtitle: Text(settings.formatTime(DateTime.now().copyWith(hour: 14, minute: 30))),
                        value: false,
                        groupValue: settings.is24HourFormat,
                        onChanged: (value) {
                          if (value == false && settings.is24HourFormat) {
                            settings.toggle24HourFormat();
                          }
                        },
                        activeColor: colorScheme.primary,
                      ),
                    ],
                  ),
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Preview der aktuellen Zeit
              Card(
                elevation: 0,
                color: colorScheme.tertiaryContainer.withValues(alpha: 0.5),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(24),
                  child: Column(
                    children: [
                      Icon(
                        Icons.access_time,
                        size: 40,
                        color: colorScheme.onTertiaryContainer,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        settings.getText('preview'),
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: colorScheme.onTertiaryContainer,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 12),
                      Text(
                        settings.formatTime(DateTime.now()),
                        style: Theme.of(context).textTheme.displayMedium?.copyWith(
                          color: colorScheme.onTertiaryContainer,
                          fontWeight: FontWeight.w300,
                          fontFeatures: [const FontFeature.tabularFigures()],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

// ═══════════════════════════════════════════════════════════════════
// Helper Widgets
// ═══════════════════════════════════════════════════════════════════

class _ThemeModeOption extends StatelessWidget {
  final IconData icon;
  final String title;
  final ThemeMode value;
  final ThemeMode groupValue;
  final ValueChanged<ThemeMode?> onChanged;
  final ColorScheme colorScheme;

  const _ThemeModeOption({
    required this.icon,
    required this.title,
    required this.value,
    required this.groupValue,
    required this.onChanged,
    required this.colorScheme,
  });

  @override
  Widget build(BuildContext context) {
    final isSelected = value == groupValue;
    
    return InkWell(
      onTap: () => onChanged(value),
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
        decoration: BoxDecoration(
          color: isSelected 
              ? colorScheme.primaryContainer.withValues(alpha: 0.5)
              : Colors.transparent,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isSelected 
                ? colorScheme.primary
                : colorScheme.outlineVariant,
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Row(
          children: [
            Icon(
              icon,
              color: isSelected ? colorScheme.primary : colorScheme.onSurfaceVariant,
              size: 24,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  color: isSelected ? colorScheme.onSurface : colorScheme.onSurfaceVariant,
                  fontWeight: isSelected ? FontWeight.w600 : FontWeight.w500,
                  fontSize: 16,
                ),
              ),
            ),
            if (isSelected)
              Icon(
                Icons.check_circle,
                color: colorScheme.primary,
                size: 24,
              ),
          ],
        ),
      ),
    );
  }
}

class _ColorCircle extends StatelessWidget {
  final Color color;
  final String label;

  const _ColorCircle({
    required this.color,
    required this.label,
  });

  @override
  Widget build(BuildContext context) {
    return Tooltip(
      message: label,
      child: Container(
        width: 48,
        height: 48,
        decoration: BoxDecoration(
          color: color,
          shape: BoxShape.circle,
          boxShadow: [
            BoxShadow(
              color: color.withValues(alpha: 0.4),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
}